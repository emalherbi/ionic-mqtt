{"version":3,"file":"mqtt-provider.js","sourceRoot":"","sources":["../../src/providers/mqtt-provider.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from \"@angular/core\";\n\ndeclare const mqtt: any;\ndeclare const document: any;\n\n@Injectable()\nexport class MQTTService {\n  private scripts: any = {};\n\n  constructor() {\n    [\n      {\n        name: \"mqtt\",\n        src: \"https://unpkg.com/mqtt/dist/mqtt.min.js\",\n      },\n    ].forEach((script: any) => {\n      this.scripts[script.name] = {\n        loaded: false,\n        src: script.src,\n      };\n    });\n  }\n\n  private _load(...scripts: string[]) {\n    var promises: any[] = [];\n    scripts.forEach((script) => promises.push(this._script(script)));\n    return Promise.all(promises);\n  }\n\n  private _script(name: string) {\n    return new Promise((resolve, reject) => {\n      if (this.scripts[name].loaded) {\n        resolve({ name, loaded: true, status: \"Already Loaded\" });\n      } else {\n        let script = document.createElement(\"script\");\n        script.type = \"text/javascript\";\n        script.src = this.scripts[name].src;\n        if (script.readyState) {\n          // IE\n          script.onreadystatechange = () => {\n            if (\n              script.readyState === \"loaded\" ||\n              script.readyState === \"complete\"\n            ) {\n              script.onreadystatechange = null;\n              this.scripts[name].loaded = true;\n              resolve({\n                name,\n                loaded: true,\n                status: \"Loaded\",\n                script,\n                src: script.src,\n              });\n            }\n          };\n        } else {\n          script.onload = () => {\n            this.scripts[name].loaded = true;\n            resolve({\n              name,\n              loaded: true,\n              status: \"Loaded\",\n              script,\n              src: script.src,\n            });\n          };\n        }\n        script.onerror = (error: any) =>\n          resolve({ name, loaded: false, status: \"Loaded\" });\n        document.getElementsByTagName(\"head\")[0].appendChild(script);\n      }\n    });\n  }\n\n  public clientMqtt(CONFIG: {\n    host: string;\n    username?: string;\n    password?: string;\n  }): any {\n    return this._load(\"mqtt\")\n      .then((data) => {\n        return mqtt.connect(CONFIG.host, {\n          username: CONFIG.username,\n          password: CONFIG.password,\n        });\n      })\n      .catch((error) => {\n        console.log(error);\n      });\n  }\n}\n"]}